-------------------------------------------------------------------------------
-- Title      : Components package (generated by Emacs VHDL Mode 3.38.1)
-- Project    :
-------------------------------------------------------------------------------
-- File       : components.vhd
-- Author     : Nico De Simone  <nico.desimone@desy.de>
-- Company    : DESY
-- Created    : 2023-05-31
-- Last update: 2023-08-29
-- Platform   :
-- Standard   : VHDL'08
-------------------------------------------------------------------------------
-- Description:
-------------------------------------------------------------------------------
-- Copyright (c) 2023 DESY
-------------------------------------------------------------------------------
-- Revisions  :
-- Date        Version  Author  Description
-- 2023-05-31  1.0      desimone    Created
-------------------------------------------------------------------------------

library ieee;
context ieee.ieee_std_context;

package components_helper is

      function ceil_log(n, b : positive) return natural;
      function ceil_log2(n   : positive) return natural;

end package components_helper;

package body components_helper is

      --## Compute the integer result of the function ceil(log(n)) where b is the base.
      function ceil_log(n, b : positive) return natural is
            variable log, residual : natural;
      begin

            residual := n - 1;
            log      := 0;

            while residual > 0 loop
                  residual := residual / b;
                  log      := log + 1;
            end loop;

            return log;
      end function;

      --## Compute the integer result of the function ceil(log2(n)).
      function ceil_log2(n : positive) return natural is
      begin
            return ceil_log(n, 2);
      end function;

end package body components_helper;

library ieee;
context ieee.ieee_std_context;
use work.components_helper.all;

package components is

      -----------------------------------------------------------------------------
      -- Component declarations
      -----------------------------------------------------------------------------

      component axis_fifo is
            generic (
                  DEPTH                : integer := 4096;
                  DATA_WIDTH           : integer := 8;
                  KEEP_ENABLE          : boolean := (DATA_WIDTH > 8);
                  KEEP_WIDTH           : integer := ((DATA_WIDTH+7)/8);
                  LAST_ENABLE          : boolean := true;
                  ID_ENABLE            : boolean := false;
                  ID_WIDTH             : integer := 8;
                  DEST_ENABLE          : boolean := false;
                  DEST_WIDTH           : integer := 8;
                  USER_ENABLE          : boolean := true;
                  USER_WIDTH           : integer := 1;
                  RAM_PIPELINE         : integer := 1;
                  OUTPUT_FIFO_ENABLE   : boolean := false;
                  FRAME_FIFO           : boolean := false;
                  USER_BAD_FRAME_VALUE : boolean := true;
                  USER_BAD_FRAME_MASK  : integer := 1;
                  DROP_OVERSIZE_FRAME  : boolean := FRAME_FIFO;
                  DROP_BAD_FRAME       : boolean := false);
            port (
                  clk                 : in  std_logic;
                  rst                 : in  std_logic;
                  s_axis_tdata        : in  unsigned(DATA_WIDTH-1 downto 0);
                  s_axis_tkeep        : in  unsigned(KEEP_WIDTH-1 downto 0);
                  s_axis_tvalid       : in  std_logic;
                  s_axis_tready       : out std_logic;
                  s_axis_tlast        : in  std_logic;
                  s_axis_tid          : in  unsigned(ID_WIDTH-1 downto 0);
                  s_axis_tdest        : in  unsigned(DEST_WIDTH-1 downto 0);
                  s_axis_tuser        : in  unsigned(USER_WIDTH-1 downto 0);
                  m_axis_tdata        : out unsigned(DATA_WIDTH-1 downto 0);
                  m_axis_tkeep        : out unsigned(KEEP_WIDTH-1 downto 0);
                  m_axis_tvalid       : out std_logic;
                  m_axis_tready       : in  std_logic;
                  m_axis_tlast        : out std_logic;
                  m_axis_tid          : out unsigned(ID_WIDTH-1 downto 0);
                  m_axis_tdest        : out unsigned(DEST_WIDTH-1 downto 0);
                  m_axis_tuser        : out unsigned(USER_WIDTH-1 downto 0);
                  pause_req           : in  std_ulogic;
                  pause_ack           : out std_ulogic;
                  status_depth        : out std_ulogic_vector(ceil_log2(DEPTH) downto 0);
                  status_depth_commit : out std_ulogic_vector(ceil_log2(DEPTH) downto 0);
                  status_overflow     : out std_logic;
                  status_bad_frame    : out std_logic;
                  status_good_frame   : out std_logic);
      end component axis_fifo;

      component axis_register is
            generic (
                  DATA_WIDTH  : integer := 8;
                  KEEP_ENABLE : boolean := (DATA_WIDTH > 8);
                  KEEP_WIDTH  : integer := ((DATA_WIDTH+7)/8);
                  LAST_ENABLE : boolean := true;
                  ID_ENABLE   : boolean := false;
                  ID_WIDTH    : integer := 8;
                  DEST_ENABLE : boolean := false;
                  DEST_WIDTH  : integer := 8;
                  USER_ENABLE : boolean := true;
                  USER_WIDTH  : integer := 1;
                  REG_TYPE    : integer := 2);
            port (
                  clk           : in  std_logic;
                  rst           : in  std_logic;
                  s_axis_tdata  : in  unsigned(DATA_WIDTH-1 downto 0);
                  s_axis_tkeep  : in  unsigned(KEEP_WIDTH-1 downto 0);
                  s_axis_tvalid : in  std_logic;
                  s_axis_tready : out std_logic;
                  s_axis_tlast  : in  std_logic;
                  s_axis_tid    : in  unsigned(ID_WIDTH-1 downto 0);
                  s_axis_tdest  : in  unsigned(DEST_WIDTH-1 downto 0);
                  s_axis_tuser  : in  unsigned(USER_WIDTH-1 downto 0);
                  m_axis_tdata  : out unsigned(DATA_WIDTH-1 downto 0);
                  m_axis_tkeep  : out unsigned(KEEP_WIDTH-1 downto 0);
                  m_axis_tvalid : out std_logic;
                  m_axis_tready : in  std_logic;
                  m_axis_tlast  : out std_logic;
                  m_axis_tid    : out unsigned(ID_WIDTH-1 downto 0);
                  m_axis_tdest  : out unsigned(DEST_WIDTH-1 downto 0);
                  m_axis_tuser  : out unsigned(USER_WIDTH-1 downto 0));
      end component axis_register;

      component axis_adapter is
            generic (
                  S_DATA_WIDTH  : integer := 8;
                  S_KEEP_ENABLE : boolean := (S_DATA_WIDTH > 8);
                  S_KEEP_WIDTH  : integer := ((S_DATA_WIDTH+7)/8);
                  M_DATA_WIDTH  : integer := 8;
                  M_KEEP_ENABLE : boolean := (M_DATA_WIDTH > 8);
                  M_KEEP_WIDTH  : integer := ((M_DATA_WIDTH+7)/8);
                  ID_ENABLE     : boolean := false;
                  ID_WIDTH      : integer := 8;
                  DEST_ENABLE   : boolean := false;
                  DEST_WIDTH    : integer := 8;
                  USER_ENABLE   : boolean := true;
                  USER_WIDTH    : integer := 1);
            port (
                  clk : in std_logic;
                  rst : in std_logic;

                  s_axis_tdata  : in  unsigned(S_DATA_WIDTH-1 downto 0);
                  s_axis_tkeep  : in  unsigned(S_KEEP_WIDTH-1 downto 0);
                  s_axis_tvalid : in  std_logic;
                  s_axis_tready : out std_logic;
                  s_axis_tlast  : in  std_logic;
                  s_axis_tid    : in  unsigned(ID_WIDTH-1 downto 0);
                  s_axis_tdest  : in  unsigned(DEST_WIDTH-1 downto 0);
                  s_axis_tuser  : in  unsigned(USER_WIDTH-1 downto 0);

                  m_axis_tdata  : out unsigned(M_DATA_WIDTH-1 downto 0);
                  m_axis_tkeep  : out unsigned(M_KEEP_WIDTH-1 downto 0);
                  m_axis_tvalid : out std_logic;
                  m_axis_tready : in  std_logic;
                  m_axis_tlast  : out std_logic;
                  m_axis_tid    : out unsigned(ID_WIDTH-1 downto 0);
                  m_axis_tdest  : out unsigned(DEST_WIDTH-1 downto 0);
                  m_axis_tuser  : out unsigned(USER_WIDTH-1 downto 0));
      end component axis_adapter;

      component axis_mux is
            generic (
                  S_COUNT     : integer := 4;
                  DATA_WIDTH  : integer := 8;
                  KEEP_ENABLE : boolean := (DATA_WIDTH > 8);
                  KEEP_WIDTH  : integer := ((DATA_WIDTH+7)/8);
                  ID_ENABLE   : boolean := false;
                  ID_WIDTH    : integer := 8;
                  DEST_ENABLE : boolean := false;
                  DEST_WIDTH  : integer := 8;
                  USER_ENABLE : boolean := true;
                  USER_WIDTH  : integer := 1);
            port (
                  clk : in std_logic;
                  rst : in std_logic;

                  s_axis_tdata  : in  unsigned(S_COUNT*DATA_WIDTH-1 downto 0);
                  s_axis_tkeep  : in  unsigned(S_COUNT*KEEP_WIDTH-1 downto 0);
                  s_axis_tvalid : in  unsigned(S_COUNT-1 downto 0);
                  s_axis_tready : out unsigned(S_COUNT-1 downto 0);
                  s_axis_tlast  : in  unsigned(S_COUNT-1 downto 0);
                  s_axis_tid    : in  unsigned(S_COUNT*ID_WIDTH-1 downto 0);
                  s_axis_tdest  : in  unsigned(S_COUNT*DEST_WIDTH-1 downto 0);
                  s_axis_tuser  : in  unsigned(S_COUNT*USER_WIDTH-1 downto 0);

                  m_axis_tdata  : out unsigned(DATA_WIDTH-1 downto 0);
                  m_axis_tkeep  : out unsigned(KEEP_WIDTH-1 downto 0);
                  m_axis_tvalid : out std_logic;
                  m_axis_tready : in  std_logic;
                  m_axis_tlast  : out std_logic;
                  m_axis_tid    : out unsigned(ID_WIDTH-1 downto 0);
                  m_axis_tdest  : out unsigned(DEST_WIDTH-1 downto 0);
                  m_axis_tuser  : out unsigned(USER_WIDTH-1 downto 0);

                  enable : in std_logic;
                  sel    : in unsigned(ceil_log2(S_COUNT)-1 downto 0)
                  );
      end component axis_mux;

      component axis_frame_join is
            generic (
                  S_COUNT    : integer := 4;
                  DATA_WIDTH : integer := 8;
                  TAG_ENABLE : boolean := true;
                  TAG_WIDTH  : integer := DATA_WIDTH
                  );
            port (
                  clk : in std_logic;
                  rst : in std_logic;

                  s_axis_tdata  : in  unsigned(S_COUNT*DATA_WIDTH-1 downto 0);
                  s_axis_tvalid : in  unsigned(S_COUNT-1 downto 0);
                  s_axis_tready : out unsigned(S_COUNT-1 downto 0);
                  s_axis_tlast  : in  unsigned(S_COUNT-1 downto 0);
                  s_axis_tuser  : in  unsigned(S_COUNT-1 downto 0);

                  m_axis_tdata  : out unsigned(DATA_WIDTH-1 downto 0);
                  m_axis_tvalid : out std_logic;
                  m_axis_tready : in  std_logic;
                  m_axis_tlast  : out std_logic;
                  m_axis_tuser  : out std_logic;

                  tag  : in  unsigned(TAG_WIDTH-1 downto 0);
                  busy : out std_logic
                  );
      end component axis_frame_join;

      component axis_cobs_decode is
            port (
                  clk : in std_logic;
                  rst : in std_logic;

                  s_axis_tdata  : in  std_ulogic_vector(7 downto 0);
                  s_axis_tvalid : in  std_ulogic;
                  s_axis_tready : out std_ulogic;
                  s_axis_tlast  : in  std_ulogic;
                  s_axis_tuser  : in  std_ulogic;

                  m_axis_tdata  : out std_ulogic_vector(7 downto 0);
                  m_axis_tvalid : out std_ulogic;
                  m_axis_tready : in  std_ulogic;
                  m_axis_tlast  : out std_ulogic;
                  m_axis_tuser  : out std_ulogic
                  );
      end component axis_cobs_decode;

      component axis_cobs_encode is
            generic (
                  APPEND_ZERO : boolean := true
                  );
            port (
                  clk : in std_logic;
                  rst : in std_logic;

                  s_axis_tdata  : in  std_ulogic_vector(7 downto 0);
                  s_axis_tvalid : in  std_ulogic;
                  s_axis_tready : out std_ulogic;
                  s_axis_tlast  : in  std_ulogic;
                  s_axis_tuser  : in  std_ulogic;

                  m_axis_tdata  : out std_ulogic_vector(7 downto 0);
                  m_axis_tvalid : out std_ulogic;
                  m_axis_tready : in  std_ulogic;
                  m_axis_tlast  : out std_ulogic;
                  m_axis_tuser  : out std_ulogic
                  );
      end component axis_cobs_encode;


end package components;
